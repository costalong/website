import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,a as n}from"./app-CTag3FGN.js";const e={},l=n(`<p>go-sqlmock 是一个实现 sql/driver 的模拟库</p><p>在 Go 语言中，使用 sqlmock 进行单元测试是一种常见且有效的方式。sqlmock 库可以帮助模拟数据库操作，从而能够独立地测试与数据库交互的代码逻辑，而无需实际连接到真实的数据库。 以下是一个简单的示例，展示如何使用 sqlmock 进行单元测试：</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> github.com/DATA-DOG/go-sqlmock</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h2><ol><li>使用sql查询用户的信息</li></ol><p>新建文件 <code>user_dao.go</code></p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 被测试的函数，从数据库中获取用户信息</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getUserInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">db</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">sql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">userId</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QueryRow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;SELECT name FROM users WHERE id = $1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">userId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Scan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">新建测试文件</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> user_dao_test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">go</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`go</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">import (</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	&quot;github.com/DATA-DOG/go-sqlmock&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	&quot;testing&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">func TestGetUserInfo(t *testing.T) {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	// 创建数据库连接模拟对象</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	db, mock, err := sqlmock.New()</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	if err != nil {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		t.Fatalf(&quot;an error &#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39; was not expected when opening a stub database connection&quot;, err)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	defer db.Close()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	// 预期的查询行为和结果</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	expectedId := 1</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	expectedName := &quot;John Doe&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	rows := sqlmock.NewRows([]string{&quot;name&quot;}).AddRow(expectedName)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	mock.ExpectQuery(&quot;^SELECT name FROM users WHERE id = \\\\$1&quot;).WithArgs(expectedId).WillReturnRows(rows)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	// 调用被测试的函数</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	name, err := getUserInfo(db, expectedId)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	if err != nil {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		t.Errorf(&quot;error occurred: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;, err)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	// 验证结果</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	if name != expectedName {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		t.Errorf(&quot;expected name </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, but got </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;, expectedName, name)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	// 确保所有预期的操作都已完成</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	if err := mock.ExpectationsWereMet(); err != nil {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		t.Errorf(&quot;there were unfulfilled expectations: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;, err)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -gcflags=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;all=-l -N&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TestGetUserInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">输出：</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> RUN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   TestGetUserInfo</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">---</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PASS:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TestGetUserInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (0.00s)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">PASS</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ok</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      github.com/costalong/blog-code-go/unit-test/sqlmock-demo/demo-one</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       3.058s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2><p><a href="https://github.com/DATA-DOG/go-sqlmock" target="_blank" rel="noopener noreferrer">go-sqlmock</a></p><p><a href="https://piaohua.github.io/post/golang/20220813-go-sqlmock/" target="_blank" rel="noopener noreferrer">使用 go-sqlmock 模拟数据库驱动编写单元测试用例</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;mid=2247493173&amp;idx=1&amp;sn=ef47fc8591a1976e0e254ed76cb1e144&amp;chksm=fa8337a2cdf4beb45a1b55c0e231fa3f340afc4d37f590b237faedce720e2a0a51ae7c2d50a9&amp;token=363190209&amp;lang=zh_CN&amp;poc_token=HFljqmajyAleVnOJw0Brf3paLJ6ivBgPXejwWARd" target="_blank" rel="noopener noreferrer">Go单测测试 — 数据库 CRUD 的 Mock 测试</a></p>`,13),t=[l];function h(p,k){return a(),i("div",null,t)}const c=s(e,[["render",h],["__file","sqlmcok.html.vue"]]),o=JSON.parse('{"path":"/golang/tests/sqlmcok.html","title":"golang 单元测试 sqlmock","lang":"zh-CN","frontmatter":{"title":"golang 单元测试 sqlmock","icon":"golang2","description":"go-sqlmock 是一个实现 sql/driver 的模拟库 在 Go 语言中，使用 sqlmock 进行单元测试是一种常见且有效的方式。sqlmock 库可以帮助模拟数据库操作，从而能够独立地测试与数据库交互的代码逻辑，而无需实际连接到真实的数据库。 以下是一个简单的示例，展示如何使用 sqlmock 进行单元测试： 安装 案例 使用sql查询用...","head":[["meta",{"property":"og:url","content":"https://costalong.com/website/golang/tests/sqlmcok.html"}],["meta",{"property":"og:site_name","content":"云原生笔记"}],["meta",{"property":"og:title","content":"golang 单元测试 sqlmock"}],["meta",{"property":"og:description","content":"go-sqlmock 是一个实现 sql/driver 的模拟库 在 Go 语言中，使用 sqlmock 进行单元测试是一种常见且有效的方式。sqlmock 库可以帮助模拟数据库操作，从而能够独立地测试与数据库交互的代码逻辑，而无需实际连接到真实的数据库。 以下是一个简单的示例，展示如何使用 sqlmock 进行单元测试： 安装 案例 使用sql查询用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-31T16:18:01.000Z"}],["meta",{"property":"article:author","content":"Costa Long"}],["meta",{"property":"article:modified_time","content":"2024-07-31T16:18:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"golang 单元测试 sqlmock\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-31T16:18:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Costa Long\\",\\"url\\":\\"https://costalong.com\\"}]}"]]},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1722441898000,"updatedTime":1722442681000,"contributors":[{"name":"costa92","email":"944310536@qq.com","commits":2}]},"readingTime":{"minutes":1.43,"words":430},"filePathRelative":"golang/tests/sqlmcok.md","localizedDate":"2024年7月31日","autoDesc":true,"excerpt":"<p>go-sqlmock 是一个实现 sql/driver 的模拟库</p>\\n<p>在 Go 语言中，使用 sqlmock 进行单元测试是一种常见且有效的方式。sqlmock 库可以帮助模拟数据库操作，从而能够独立地测试与数据库交互的代码逻辑，而无需实际连接到真实的数据库。\\n以下是一个简单的示例，展示如何使用 sqlmock 进行单元测试：</p>\\n<h2>安装</h2>\\n<div class=\\"language-sh line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"sh\\" data-title=\\"sh\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">go</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> get</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> github.com/DATA-DOG/go-sqlmock</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}');export{c as comp,o as data};
