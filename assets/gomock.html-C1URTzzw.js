import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,a as n}from"./app-BR6hKJBx.js";const t={},o=n(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>GoMock是由Golang官方开发维护的测试框架，实现了较为完整的基于interface的Mock功能，能够与Golang内置的testing包良好集成，也能用于其它的测试环境中。GoMock测试框架包含了GoMock包和mockgen工具两部分，其中GoMock包完成对桩对象生命周期的管理，mockgen工具用来生成interface对应的Mock类源文件。</p><p>GoMock官网: <a href="https://github.com/golang/mock" target="_blank" rel="noopener noreferrer">github</a></p><h2 id="安装使用" tabindex="-1"><a class="header-anchor" href="#安装使用"><span>安装使用</span></a></h2><h3 id="安装-mockgen" tabindex="-1"><a class="header-anchor" href="#安装-mockgen"><span>安装 mockgen</span></a></h3><p><strong>Go version &lt; 1.16</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">GO111MODULE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">on</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> github.com/golang/mock/mockgen@v1.6.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Go 1.16+</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> github.com/golang/mock/mockgen@v1.6.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="mockgen辅助代码生成工具安装" tabindex="-1"><a class="header-anchor" href="#mockgen辅助代码生成工具安装"><span>mockgen辅助代码生成工具安装：</span></a></h3><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> github.com/golang/mock/mockgen</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明"><span>参数说明</span></a></h2><p>自定义mock实现主要包含了自定义参数，自定义返回值，自定义mock调用次数以及调用顺序</p><h3 id="_1-自定义参数" tabindex="-1"><a class="header-anchor" href="#_1-自定义参数"><span>（1）自定义参数</span></a></h3><p>参数支持Eq,Any,Not,Nil，分别代表一下含义：</p><pre><code>Eq(value) 用于参数为固定值的场景。
Any() 用于任意参数的场景。
Not(value) 用于表示参数非 value 以外的值场景。
Nil()  用于表示参数None 值的场景
</code></pre><h3 id="_2-自定义返回值" tabindex="-1"><a class="header-anchor" href="#_2-自定义返回值"><span>（2）自定义返回值</span></a></h3><p>返回值支持如下几种：</p><pre><code>Return 用于返回确定的值的场景
Do 用于无返回值的场景。
DoAndReturn 用于可以动态地控制返回值。
</code></pre><h3 id="_3-自定义mock调用次数" tabindex="-1"><a class="header-anchor" href="#_3-自定义mock调用次数"><span>（3）自定义mock调用次数</span></a></h3><pre><code>mock调用次数支持如下几种场景：

Times() 断言 Mock 方法被调用的次数, 指定次数。
MaxTimes() 最大次数。
MinTimes() 最小次数。
AnyTimes() 任意次数（包括 0 次）
</code></pre><h3 id="_4-自定义mock调用顺序" tabindex="-1"><a class="header-anchor" href="#_4-自定义mock调用顺序"><span>（4）自定义mock调用顺序</span></a></h3><p>当存在多个mock之间相互调用的情况时，可以通过一下2种方式定义mock执行的顺序：</p><pre><code>直接在函数后面接After
使用gomock.InOrder设置执行顺序
</code></pre>`,24),s=[o];function l(c,r){return a(),i("div",null,s)}const g=e(t,[["render",l],["__file","gomock.html.vue"]]),d=JSON.parse('{"path":"/golang/tests/gomock.html","title":"golang 单元测试 gomock","lang":"zh-CN","frontmatter":{"title":"golang 单元测试 gomock","icon":"golang","description":"简介 GoMock是由Golang官方开发维护的测试框架，实现了较为完整的基于interface的Mock功能，能够与Golang内置的testing包良好集成，也能用于其它的测试环境中。GoMock测试框架包含了GoMock包和mockgen工具两部分，其中GoMock包完成对桩对象生命周期的管理，mockgen工具用来生成interface对应的M...","head":[["meta",{"property":"og:url","content":"https://costalong.com/website/golang/tests/gomock.html"}],["meta",{"property":"og:site_name","content":"云原生开发的创新之路"}],["meta",{"property":"og:title","content":"golang 单元测试 gomock"}],["meta",{"property":"og:description","content":"简介 GoMock是由Golang官方开发维护的测试框架，实现了较为完整的基于interface的Mock功能，能够与Golang内置的testing包良好集成，也能用于其它的测试环境中。GoMock测试框架包含了GoMock包和mockgen工具两部分，其中GoMock包完成对桩对象生命周期的管理，mockgen工具用来生成interface对应的M..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T17:37:06.000Z"}],["meta",{"property":"article:author","content":"Costa Long"}],["meta",{"property":"article:modified_time","content":"2024-07-26T17:37:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"golang 单元测试 gomock\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-26T17:37:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Costa Long\\",\\"url\\":\\"https://costalong.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"安装使用","slug":"安装使用","link":"#安装使用","children":[{"level":3,"title":"安装 mockgen","slug":"安装-mockgen","link":"#安装-mockgen","children":[]},{"level":3,"title":"mockgen辅助代码生成工具安装：","slug":"mockgen辅助代码生成工具安装","link":"#mockgen辅助代码生成工具安装","children":[]}]},{"level":2,"title":"参数说明","slug":"参数说明","link":"#参数说明","children":[{"level":3,"title":"（1）自定义参数","slug":"_1-自定义参数","link":"#_1-自定义参数","children":[]},{"level":3,"title":"（2）自定义返回值","slug":"_2-自定义返回值","link":"#_2-自定义返回值","children":[]},{"level":3,"title":"（3）自定义mock调用次数","slug":"_3-自定义mock调用次数","link":"#_3-自定义mock调用次数","children":[]},{"level":3,"title":"（4）自定义mock调用顺序","slug":"_4-自定义mock调用顺序","link":"#_4-自定义mock调用顺序","children":[]}]}],"git":{"createdTime":1722015426000,"updatedTime":1722015426000,"contributors":[{"name":"costa92","email":"944310536@qq.com","commits":1}]},"readingTime":{"minutes":1.47,"words":441},"filePathRelative":"golang/tests/gomock.md","localizedDate":"2024年7月26日","autoDesc":true}');export{g as comp,d as data};
